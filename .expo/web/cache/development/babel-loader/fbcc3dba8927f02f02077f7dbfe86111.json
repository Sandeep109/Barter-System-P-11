{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"G:\\\\book-santa-stage-11-master\\\\screens\\\\BookRequestScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport db from \"../config\";\nimport firebase from 'firebase';\nimport MyHeader from \"../components/MyHeader\";\n\nvar BookRequestScreen = function (_Component) {\n  _inherits(BookRequestScreen, _Component);\n\n  var _super = _createSuper(BookRequestScreen);\n\n  function BookRequestScreen() {\n    var _this;\n\n    _classCallCheck(this, BookRequestScreen);\n\n    _this = _super.call(this);\n\n    _this.addRequest = function _callee(bookName, reasonToRequest) {\n      var userId, randomRequestId;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              userId = _this.state.userId;\n              randomRequestId = _this.createUniqueId();\n              db.collection('requested_books').add({\n                \"user_id\": userId,\n                \"book_name\": bookName,\n                \"reason_to_request\": reasonToRequest,\n                \"request_id\": randomRequestId,\n                \"book_status\": \"requested\",\n                \"date\": firebase.firestore.FieldValue.serverTimestamp()\n              });\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_this.getBookRequest());\n\n            case 5:\n              db.collection('users').where(\"email_id\", \"==\", userId).get().then().then(function (snapshot) {\n                snapshot.forEach(function (doc) {\n                  db.collection('users').doc(doc.id).update({\n                    IsBookRequestActive: true\n                  });\n                });\n              });\n\n              _this.setState({\n                bookName: '',\n                reasonToRequest: '',\n                requestId: randomRequestId\n              });\n\n              return _context.abrupt(\"return\", Alert.alert(\"Book Requested Successfully\"));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.receivedBooks = function (bookName) {\n      var userId = _this.state.userId;\n      var requestId = _this.state.requestId;\n      db.collection('received_books').add({\n        \"user_id\": userId,\n        \"book_name\": bookName,\n        \"request_id\": requestId,\n        \"bookStatus\": \"received\"\n      });\n    };\n\n    _this.getBookRequest = function () {\n      var bookRequest = db.collection('requested_books').where('user_id', '==', _this.state.userId).get().then(function (snapshot) {\n        snapshot.forEach(function (doc) {\n          if (doc.data().book_status !== \"received\") {\n            _this.setState({\n              requestId: doc.data().request_id,\n              requestedBookName: doc.data().book_name,\n              bookStatus: doc.data().book_status,\n              docId: doc.id\n            });\n          }\n        });\n      });\n    };\n\n    _this.sendNotification = function () {\n      db.collection('users').where('email_id', '==', _this.state.userId).get().then(function (snapshot) {\n        snapshot.forEach(function (doc) {\n          var name = doc.data().first_name;\n          var lastName = doc.data().last_name;\n          db.collection('all_notifications').where('request_id', '==', _this.state.requestId).get().then(function (snapshot) {\n            snapshot.forEach(function (doc) {\n              var donorId = doc.data().donor_id;\n              var bookName = doc.data().book_name;\n              db.collection('all_notifications').add({\n                \"targeted_user_id\": donorId,\n                \"message\": name + \" \" + lastName + \" received the book \" + bookName,\n                \"notification_status\": \"unread\",\n                \"book_name\": bookName\n              });\n            });\n          });\n        });\n      });\n    };\n\n    _this.updateBookRequestStatus = function () {\n      db.collection('requested_books').doc(_this.state.docId).update({\n        book_status: 'recieved'\n      });\n      db.collection('users').where('email_id', '==', _this.state.userId).get().then(function (snapshot) {\n        snapshot.forEach(function (doc) {\n          db.collection('users').doc(doc.id).update({\n            IsBookRequestActive: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      userId: firebase.auth().currentUser.email,\n      bookName: \"\",\n      reasonToRequest: \"\",\n      IsBookRequestActive: \"\",\n      requestedBookName: \"\",\n      bookStatus: \"\",\n      requestId: \"\",\n      userDocId: '',\n      docId: ''\n    };\n    return _this;\n  }\n\n  _createClass(BookRequestScreen, [{\n    key: \"createUniqueId\",\n    value: function createUniqueId() {\n      return Math.random().toString(36).substring(7);\n    }\n  }, {\n    key: \"getIsBookRequestActive\",\n    value: function getIsBookRequestActive() {\n      var _this2 = this;\n\n      db.collection('users').where('email_id', '==', this.state.userId).onSnapshot(function (querySnapshot) {\n        querySnapshot.forEach(function (doc) {\n          _this2.setState({\n            IsBookRequestActive: doc.data().IsBookRequestActive,\n            userDocId: doc.id\n          });\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getBookRequest();\n      this.getIsBookRequestActive();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      if (this.state.IsBookRequestActive === true) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 9\n          }\n        }, React.createElement(View, {\n          style: {\n            borderColor: \"orange\",\n            borderWidth: 2,\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: 10,\n            margin: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 11\n          }\n        }, \"Book Name\"), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 11\n          }\n        }, this.state.requestedBookName)), React.createElement(View, {\n          style: {\n            borderColor: \"orange\",\n            borderWidth: 2,\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: 10,\n            margin: 10\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 11\n          }\n        }, \" Book Status \"), React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 11\n          }\n        }, this.state.bookStatus)), React.createElement(TouchableOpacity, {\n          style: {\n            borderWidth: 1,\n            borderColor: 'orange',\n            backgroundColor: \"orange\",\n            width: 300,\n            alignSelf: 'center',\n            alignItems: 'center',\n            height: 30,\n            marginTop: 30\n          },\n          onPress: function onPress() {\n            _this3.sendNotification();\n\n            _this3.updateBookRequestStatus();\n\n            _this3.receivedBooks(_this3.state.requestedBookName);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 11\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 11\n          }\n        }, \"I recieved the book \")));\n      } else {\n        return React.createElement(View, {\n          style: {\n            flex: 1\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 9\n          }\n        }, React.createElement(MyHeader, {\n          title: \"Request Book\",\n          navigation: this.props.navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 11\n          }\n        }), React.createElement(ScrollView, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 11\n          }\n        }, React.createElement(KeyboardAvoidingView, {\n          style: styles.keyBoardStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }\n        }, React.createElement(TextInput, {\n          style: styles.formTextInput,\n          placeholder: \"enter book name\",\n          onChangeText: function onChangeText(text) {\n            _this3.setState({\n              bookName: text\n            });\n          },\n          value: this.state.bookName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }\n        }), React.createElement(TextInput, {\n          style: [styles.formTextInput, {\n            height: 300\n          }],\n          multiline: true,\n          numberOfLines: 8,\n          placeholder: \"Why do you need the book\",\n          onChangeText: function onChangeText(text) {\n            _this3.setState({\n              reasonToRequest: text\n            });\n          },\n          value: this.state.reasonToRequest,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }\n        }), React.createElement(TouchableOpacity, {\n          style: styles.button,\n          onPress: function onPress() {\n            _this3.addRequest(_this3.state.bookName, _this3.state.reasonToRequest);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }\n        }, React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }\n        }, \"Request\")))));\n      }\n    }\n  }]);\n\n  return BookRequestScreen;\n}(Component);\n\nexport { BookRequestScreen as default };\nvar styles = StyleSheet.create({\n  keyBoardStyle: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  formTextInput: {\n    width: \"75%\",\n    height: 35,\n    alignSelf: 'center',\n    borderColor: '#ffab91',\n    borderRadius: 10,\n    borderWidth: 1,\n    marginTop: 20,\n    padding: 10\n  },\n  button: {\n    width: \"75%\",\n    height: 50,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 10,\n    backgroundColor: \"#ff5722\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 8\n    },\n    shadowOpacity: 0.44,\n    shadowRadius: 10.32,\n    elevation: 16,\n    marginTop: 20\n  }\n});","map":{"version":3,"sources":["G:/book-santa-stage-11-master/screens/BookRequestScreen.js"],"names":["React","Component","db","firebase","MyHeader","BookRequestScreen","addRequest","bookName","reasonToRequest","userId","state","randomRequestId","createUniqueId","collection","add","firestore","FieldValue","serverTimestamp","getBookRequest","where","get","then","snapshot","forEach","doc","id","update","IsBookRequestActive","setState","requestId","Alert","alert","receivedBooks","bookRequest","data","book_status","request_id","requestedBookName","book_name","bookStatus","docId","sendNotification","name","first_name","lastName","last_name","donorId","donor_id","updateBookRequestStatus","auth","currentUser","email","userDocId","Math","random","toString","substring","onSnapshot","querySnapshot","getIsBookRequestActive","flex","justifyContent","borderColor","borderWidth","alignItems","padding","margin","backgroundColor","width","alignSelf","height","marginTop","props","navigation","styles","keyBoardStyle","formTextInput","text","button","StyleSheet","create","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  KeyboardAvoidingView,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  Alert} from 'react-native';\nimport db from '../config';\nimport firebase from 'firebase';\nimport MyHeader from '../components/MyHeader'\n\nexport default class BookRequestScreen extends Component{\n  constructor(){\n    super();\n    this.state ={\n      userId : firebase.auth().currentUser.email,\n      bookName:\"\",\n      reasonToRequest:\"\",\n      IsBookRequestActive : \"\",\n      requestedBookName: \"\",\n      bookStatus:\"\",\n      requestId:\"\",\n      userDocId: '',\n      docId :''\n    }\n  }\n\n  createUniqueId(){\n    return Math.random().toString(36).substring(7);\n  }\n\n\n\n  addRequest = async (bookName,reasonToRequest)=>{\n    var userId = this.state.userId\n    var randomRequestId = this.createUniqueId()\n    db.collection('requested_books').add({\n        \"user_id\": userId,\n        \"book_name\":bookName,\n        \"reason_to_request\":reasonToRequest,\n        \"request_id\"  : randomRequestId,\n        \"book_status\" : \"requested\",\n         \"date\"       : firebase.firestore.FieldValue.serverTimestamp()\n\n    })\n\n    await  this.getBookRequest()\n    db.collection('users').where(\"email_id\",\"==\",userId).get()\n    .then()\n    .then((snapshot)=>{\n      snapshot.forEach((doc)=>{\n        db.collection('users').doc(doc.id).update({\n      IsBookRequestActive: true\n      })\n    })\n  })\n\n    this.setState({\n        bookName :'',\n        reasonToRequest : '',\n        requestId: randomRequestId\n    })\n\n    return Alert.alert(\"Book Requested Successfully\")\n\n\n  }\n\nreceivedBooks=(bookName)=>{\n  var userId = this.state.userId\n  var requestId = this.state.requestId\n  db.collection('received_books').add({\n      \"user_id\": userId,\n      \"book_name\":bookName,\n      \"request_id\"  : requestId,\n      \"bookStatus\"  : \"received\",\n\n  })\n}\n\n\n\n\ngetIsBookRequestActive(){\n  db.collection('users')\n  .where('email_id','==',this.state.userId)\n  .onSnapshot(querySnapshot => {\n    querySnapshot.forEach(doc => {\n      this.setState({\n        IsBookRequestActive:doc.data().IsBookRequestActive,\n        userDocId : doc.id\n      })\n    })\n  })\n}\n\n\n\n\n\n\n\n\n\n\ngetBookRequest =()=>{\n  // getting the requested book\nvar bookRequest=  db.collection('requested_books')\n  .where('user_id','==',this.state.userId)\n  .get()\n  .then((snapshot)=>{\n    snapshot.forEach((doc)=>{\n      if(doc.data().book_status !== \"received\"){\n        this.setState({\n          requestId : doc.data().request_id,\n          requestedBookName: doc.data().book_name,\n          bookStatus:doc.data().book_status,\n          docId     : doc.id\n        })\n      }\n    })\n})}\n\n\n\nsendNotification=()=>{\n  //to get the first name and last name\n  db.collection('users').where('email_id','==',this.state.userId).get()\n  .then((snapshot)=>{\n    snapshot.forEach((doc)=>{\n      var name = doc.data().first_name\n      var lastName = doc.data().last_name\n\n      // to get the donor id and book nam\n      db.collection('all_notifications').where('request_id','==',this.state.requestId).get()\n      .then((snapshot)=>{\n        snapshot.forEach((doc) => {\n          var donorId  = doc.data().donor_id\n          var bookName =  doc.data().book_name\n\n          //targert user id is the donor id to send notification to the user\n          db.collection('all_notifications').add({\n            \"targeted_user_id\" : donorId,\n            \"message\" : name +\" \" + lastName + \" received the book \" + bookName ,\n            \"notification_status\" : \"unread\",\n            \"book_name\" : bookName\n          })\n        })\n      })\n    })\n  })\n}\n\ncomponentDidMount(){\n  this.getBookRequest()\n  this.getIsBookRequestActive()\n\n}\n\nupdateBookRequestStatus=()=>{\n  //updating the book status after receiving the book\n  db.collection('requested_books').doc(this.state.docId)\n  .update({\n    book_status : 'recieved'\n  })\n\n  //getting the  doc id to update the users doc\n  db.collection('users').where('email_id','==',this.state.userId).get()\n  .then((snapshot)=>{\n    snapshot.forEach((doc) => {\n      //updating the doc\n      db.collection('users').doc(doc.id).update({\n        IsBookRequestActive: false\n      })\n    })\n  })\n\n\n}\n\n\n  render(){\n\n    if(this.state.IsBookRequestActive === true){\n      return(\n\n        // Status screen\n\n        <View style = {{flex:1,justifyContent:'center'}}>\n          <View style={{borderColor:\"orange\",borderWidth:2,justifyContent:'center',alignItems:'center',padding:10,margin:10}}>\n          <Text>Book Name</Text>\n          <Text>{this.state.requestedBookName}</Text>\n          </View>\n          <View style={{borderColor:\"orange\",borderWidth:2,justifyContent:'center',alignItems:'center',padding:10,margin:10}}>\n          <Text> Book Status </Text>\n\n          <Text>{this.state.bookStatus}</Text>\n          </View>\n\n          <TouchableOpacity style={{borderWidth:1,borderColor:'orange',backgroundColor:\"orange\",width:300,alignSelf:'center',alignItems:'center',height:30,marginTop:30}}\n          onPress={()=>{\n            this.sendNotification()\n            this.updateBookRequestStatus();\n            this.receivedBooks(this.state.requestedBookName)\n          }}>\n          <Text>I recieved the book </Text>\n          </TouchableOpacity>\n        </View>\n      )\n    }\n    else\n    {\n    return(\n      // Form screen\n        <View style={{flex:1}}>\n          <MyHeader title=\"Request Book\" navigation ={this.props.navigation}/>\n\n          <ScrollView>\n            <KeyboardAvoidingView style={styles.keyBoardStyle}>\n              <TextInput\n                style ={styles.formTextInput}\n                placeholder={\"enter book name\"}\n                onChangeText={(text)=>{\n                    this.setState({\n                        bookName:text\n                    })\n                }}\n                value={this.state.bookName}\n              />\n              <TextInput\n                style ={[styles.formTextInput,{height:300}]}\n                multiline\n                numberOfLines ={8}\n                placeholder={\"Why do you need the book\"}\n                onChangeText ={(text)=>{\n                    this.setState({\n                        reasonToRequest:text\n                    })\n                }}\n                value ={this.state.reasonToRequest}\n              />\n              <TouchableOpacity\n                style={styles.button}\n                onPress={()=>{ this.addRequest(this.state.bookName,this.state.reasonToRequest);\n                }}\n                >\n                <Text>Request</Text>\n              </TouchableOpacity>\n\n            </KeyboardAvoidingView>\n            </ScrollView>\n        </View>\n    )\n  }\n}\n}\n\nconst styles = StyleSheet.create({\n  keyBoardStyle : {\n    flex:1,\n    alignItems:'center',\n    justifyContent:'center'\n  },\n  formTextInput:{\n    width:\"75%\",\n    height:35,\n    alignSelf:'center',\n    borderColor:'#ffab91',\n    borderRadius:10,\n    borderWidth:1,\n    marginTop:20,\n    padding:10,\n  },\n  button:{\n    width:\"75%\",\n    height:50,\n    justifyContent:'center',\n    alignItems:'center',\n    borderRadius:10,\n    backgroundColor:\"#ff5722\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n       width: 0,\n       height: 8,\n    },\n    shadowOpacity: 0.44,\n    shadowRadius: 10.32,\n    elevation: 16,\n    marginTop:20\n    },\n  }\n)\n"]},"metadata":{},"sourceType":"module"}